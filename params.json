{
  "name": "veee",
  "tagline": "Extendable object schema validation module inspired by joi (almost the same, but async and extendable)",
  "body": "# veee\r\n\r\nObject schema validation inspired by `joi` (almost the same, but async and extensible)\r\n\r\n### Installation\r\n\r\n    $ npm install node-veee --save\r\n\r\n### Usage\r\n    \r\n```js\r\n\r\nvar V = require('node-veee');\r\n\r\nvar v = new V([options]);\r\n\r\nv.use(function(v) {\r\n  v.register('number', function(value, context, cb) {\r\n    if (typeof value === 'number' && value === value) return cb();\r\n    cb('is not a number');\r\n  });\r\n  \r\n  v.register('number', 'integer', function(value, context, cb) {\r\n    if (parseInt(value.toString(), 10) === value) return cb();\r\n    cb('is not an integer');\r\n  });\r\n  \r\n  v.register('number', 'positive', function(value, context, cb) {\r\n    if (value > 0) return cb();\r\n    cb('is not a positive number');\r\n  });\r\n})\r\n\r\nv.validate(5, v.number().positive().integer(), function(err, result) {\r\n  // null, 5\r\n});\r\n\r\nv.validate(-1, v.number().positive(), function(err, result) {\r\n  // { type: 'number', name: 'positive', path: '_', value: -1, error: 'is not a positive number' }, undefined\r\n});\r\n\r\nvar date = new Date();\r\n\r\nv.validate(date, v.or(v.date(), v.string().isodate()), ...);\r\n```\r\n\r\n### Build-in types\r\n\r\n`veee` is trying to be very similar to `joi`. it contains a few build-in validators:\r\n\r\n- number\r\n- string\r\n- boolean\r\n- array\r\n- object\r\n- date\r\n- function\r\n- any (inherited by all types)\r\n\r\n### TODO\r\n\r\n- update documentation",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}